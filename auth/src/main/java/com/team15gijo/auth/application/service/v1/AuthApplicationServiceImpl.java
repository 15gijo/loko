package com.team15gijo.auth.application.service.v1;

import com.team15gijo.auth.application.dto.v1.AuthSignUpRequestCommand;
import com.team15gijo.auth.application.dto.v1.AuthValidatePasswordRequestCommand;
import com.team15gijo.auth.application.service.AuthApplicationService;
import com.team15gijo.auth.domain.exception.AuthDomainExceptionCode;
import com.team15gijo.auth.domain.model.AuthEntity;
import com.team15gijo.auth.domain.model.Role;
import com.team15gijo.auth.domain.repository.AuthRepository;
import com.team15gijo.auth.domain.service.AuthDomainService;
import com.team15gijo.auth.infrastructure.client.UserServiceClient;
import com.team15gijo.auth.infrastructure.dto.security.AuthLoginResponseCommand;
import com.team15gijo.auth.infrastructure.exception.AuthInfraExceptionCode;
import com.team15gijo.auth.infrastructure.jwt.JwtAdminProvider;
import com.team15gijo.auth.infrastructure.jwt.JwtProvider;
import com.team15gijo.auth.infrastructure.redis.repository.BlacklistRedisRepositoryImpl;
import com.team15gijo.auth.infrastructure.redis.repository.RefreshTokenRedisRepositoryImpl;
import com.team15gijo.auth.presentation.dto.internal.request.v1.AuthIdentifierUpdateRequestDto;
import com.team15gijo.auth.presentation.dto.internal.request.v1.AuthPasswordUpdateRequestDto;
import com.team15gijo.auth.presentation.dto.internal.request.v1.AuthSignUpRequestDto;
import com.team15gijo.auth.presentation.dto.internal.request.v1.AuthSignUpUpdateUserIdRequestDto;
import com.team15gijo.auth.presentation.dto.internal.request.v1.OAuthAuthSignUpRequestDto;
import com.team15gijo.auth.presentation.dto.request.v1.AdminAssignManagerRequestDto;
import com.team15gijo.auth.presentation.dto.request.v1.AssignAdminRequestDto;
import com.team15gijo.auth.presentation.dto.response.v2.AuthRefreshResponseDto;
import com.team15gijo.common.exception.CommonExceptionCode;
import com.team15gijo.common.exception.CustomException;
import io.jsonwebtoken.Claims;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.util.Date;
import java.util.UUID;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Slf4j
@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class AuthApplicationServiceImpl implements AuthApplicationService {

    private final AuthDomainService authDomainService;
    private final AuthRepository authRepository;
    private final UserServiceClient userServiceClient;
    private final JwtAdminProvider jwtAdminProvider;
    private final JwtProvider jwtProvider;
    private final RefreshTokenRedisRepositoryImpl refreshTokenRedisRepository;
    private final BlacklistRedisRepositoryImpl blacklistRedisRepository;

    @Override
    @Transactional
    public UUID signUp(AuthSignUpRequestDto authSignUpRequestDto) {
        AuthSignUpRequestCommand authSignUpRequestCommand = AuthSignUpRequestCommand.from(
                authSignUpRequestDto);
        AuthEntity createdAuth = authDomainService.createAuth(authSignUpRequestCommand);
        authRepository.save(createdAuth);
        return createdAuth.getId();
    }

    @Override
    @Transactional
    public UUID signUpOAuth(OAuthAuthSignUpRequestDto oAuthAuthSignUpRequestDto) {
        AuthEntity createdAuth = authDomainService.createAuthOAuth(oAuthAuthSignUpRequestDto);
        authRepository.save(createdAuth);
        return createdAuth.getId();
    }

    //Ïñ¥ÎìúÎØº Í∂åÌïú Î∂ÄÏó¨
    @Override
    @Transactional
    public void assignAdmin(String token, AssignAdminRequestDto assignAdminRequestDto) {

        //Ïú†Ï†Ä Í≤ÄÏÇ¨, Ïù¥Î©îÏùº Í∞ÄÏ†∏Ïò§Í∏∞
        String email = userServiceClient.getEmailByUserId(assignAdminRequestDto.userId());

        //Ïñ¥ÎìúÎØº ÌÜ†ÌÅ∞ ÌååÏã±
        String rawToken = token.replace("Bearer ", "");
        System.out.println("rawToken = " + rawToken);
        Claims claims = jwtAdminProvider.parseToken(rawToken);
        System.out.println("üéØ subject: " + claims.getSubject());

        //trusted-admin ÏÑúÎ∏åÏ†ùÌä∏ ÌôïÏù∏
        if (!"trusted-admin".equals(claims.getSubject())) {
            throw new CustomException(CommonExceptionCode.FORBIDDEN_ACCESS);
        }

        //Ïù∏Ï¶ù ÌÖåÏù¥Î∏î Ïú†Ï†Ä ÌôïÏù∏ ÌõÑ Ïñ¥ÎìúÎØº Í∂åÌïú Î∂ÄÏó¨
        AuthEntity auth = authRepository.findByIdentifier(email)
                .orElseThrow(() -> new CustomException(
                        AuthDomainExceptionCode.USER_IDENTIFIER_NOT_FOUND));

        auth.updateRole(Role.ADMIN);
    }

    @Override
    @Transactional
    public void signUpUpdateUserId(
            AuthSignUpUpdateUserIdRequestDto authSignUpUpdateUserIdRequestDto) {
        authRepository.updateUserMeta(authSignUpUpdateUserIdRequestDto.userId(),
                authSignUpUpdateUserIdRequestDto.authId());
    }

    @Override
    @Transactional
    public void updateIdentifier(AuthIdentifierUpdateRequestDto authIdentifierUpdateRequestDto) {
        //Ïù∏Ï¶ù ÎîîÎπÑ ÌôïÏù∏
        AuthEntity auth = authRepository.findByUserId(authIdentifierUpdateRequestDto.userId())
                .orElseThrow(() -> new CustomException(
                        AuthDomainExceptionCode.AUTH_NOT_FOUND));

        //ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏
        authDomainService.validatePassword(
                new AuthValidatePasswordRequestCommand(
                        authIdentifierUpdateRequestDto.password(),
                        auth.getPassword()
                )
        );

        //ÏóÖÎç∞Ïù¥Ìä∏
        auth.updateIdentifier(authIdentifierUpdateRequestDto.newIdentifier());
    }

    @Override
    @Transactional
    public void updatePassword(AuthPasswordUpdateRequestDto authPasswordUpdateRequestDto) {
        //Ïù∏Ï¶ù ÎîîÎπÑ ÌôïÏù∏
        AuthEntity auth = authRepository.findByUserId(authPasswordUpdateRequestDto.userId())
                .orElseThrow(() -> new CustomException(
                        AuthDomainExceptionCode.AUTH_NOT_FOUND));

        //ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏
        authDomainService.validatePassword(
                new AuthValidatePasswordRequestCommand(
                        authPasswordUpdateRequestDto.currentPassword(),
                        auth.getPassword()
                )
        );

        //ÎπÑÎ∞ÄÎ≤àÌò∏ ÏóÖÎç∞Ïù¥Ìä∏
        auth.updatePassword(authPasswordUpdateRequestDto.newPassword());
    }

    @Override
    @Transactional
    public void assignManger(AdminAssignManagerRequestDto adminAssignManagerRequestDto) {
        //Ïù∏Ï¶ù ÎîîÎπÑ ÌôïÏù∏
        AuthEntity auth = authRepository.findByUserId(adminAssignManagerRequestDto.targetUserId())
                .orElseThrow(() -> new CustomException(
                        AuthDomainExceptionCode.AUTH_NOT_FOUND));

        //USERÎ°§ ÌôïÏù∏
        if (auth.getRole() != Role.USER) {
            throw new CustomException(AuthDomainExceptionCode.ALREADY_PROMOTED);
        }

        //Î°§ Î∂ÄÏó¨ ÏóÖÎç∞Ïù¥Ìä∏
        auth.updateRole(Role.MANAGER);
    }

    @Override
    @Transactional
    public AuthRefreshResponseDto refresh(HttpServletRequest request,
            HttpServletResponse response) {

        //refresh ÌÜ†ÌÅ∞ Í∫ºÎÇ¥Í∏∞
        String refreshToken = null;
        if (request.getCookies() != null) {
            for (Cookie cookie : request.getCookies()) {
                if ("refresh_token".equals(cookie.getName())) {
                    refreshToken = cookie.getValue();
                    break;
                }
            }
        }
        if (refreshToken == null) {
            throw new CustomException(AuthInfraExceptionCode.REFRESH_TOKEN_EXPIRED);
        }

        //refresh ÌÜ†ÌÅ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        jwtProvider.validateRefreshToken(refreshToken);

        //refresh ÌÜ†ÌÅ∞ userId ÎΩëÍ∏∞
        Claims claims = jwtProvider.parseToken(refreshToken);

        Long userId = Long.valueOf(claims.getSubject());
        String role = claims.get("role", String.class);
        String nickname = claims.get("nickname", String.class);
        String region = claims.get("region", String.class);

        //Redis ÏôÄ ÎπÑÍµê
        String redisRefreshToken = refreshTokenRedisRepository.get(userId)
                .orElseThrow(
                        () -> new CustomException(AuthInfraExceptionCode.REFRESH_TOKEN_EXPIRED));
        if (!redisRefreshToken.equals(refreshToken)) {
            throw new CustomException(AuthInfraExceptionCode.INVALID_REFRESH_TOKEN);
        }

        //accessToken Ïû¨Î∞úÍ∏â
        AuthLoginResponseCommand authLoginResponseCommand = new AuthLoginResponseCommand(
                userId,
                role,
                nickname,
                region
        );
        String newAccessToken = jwtProvider.generateAccessToken(authLoginResponseCommand);

        return new AuthRefreshResponseDto(newAccessToken);
    }

    @Override
    @Transactional
    public void logout(String accessToken, Long userId) {
        //accessToken ÎÇ®ÏùÄ ÎßåÎ£å ÏãúÍ∞Ñ Íµ¨ÌïòÍ∏∞
        Claims claims = jwtProvider.parseToken(accessToken);
        Date expirationDate = claims.getExpiration();
        long now = System.currentTimeMillis();
        long ttl = expirationDate.getTime() - now;

        //Î∏îÎûôÎ¶¨Ïä§Ìä∏ accessToken Ï†ÄÏû•
        if (ttl > 0) {
            blacklistRedisRepository.save(accessToken, "logout", ttl);
        }

        //refresh ÌÜ†ÌÅ∞ ÏÇ≠Ï†ú
        refreshTokenRedisRepository.delete(userId);
    }

}
